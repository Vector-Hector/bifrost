package bifrost

import "fmt"

func mph(mph float64) (float64, error) {
	return mph * 0.000447, nil
}

func kmph(kmph float64) (float64, error) {
	return kmph * 0.000278, nil
}

func getImplicitMaxSpeedValue(speedStr string, maxSpeed float64) (float64, error) {
	switch speedStr {
	case "signals":
		return kmph(30)
	case "walk":
		return kmph(5)
	case "AR:urban":
		return kmph(40)
	case "AR:urban:primary":
		return kmph(60)
	case "AR:urban:secondary":
		return kmph(60)
	case "AR:rural":
		return kmph(110)
	case "AT:urban":
		return kmph(50)
	case "AT:rural":
		return kmph(100)
	case "AT:bicycle_road":
		return kmph(30)
	case "AT:trunk":
		return kmph(100)
	case "AT:motorway":
		return kmph(130)
	case "BE-VLG:urban":
		return kmph(50)
	case "BE-WAL:urban":
		return kmph(50)
	case "BE-BRU:urban":
		return kmph(30)
	case "BE-VLG:rural":
		return kmph(70)
	case "BE-WAL:rural":
		return kmph(90)
	case "BE-BRU:rural":
		return kmph(70)
	case "BE:living_street":
		return kmph(20)
	case "BE:cyclestreet":
		return kmph(30)
	case "BE:zone30":
		return kmph(30)
	case "BE:zone50":
		return kmph(50)
	case "BE:zone70":
		return kmph(70)
	case "BE:zone90":
		return kmph(90)
	case "BE:trunk":
		return kmph(120)
	case "BE:motorway":
		return kmph(120)
	case "BG:urban":
		return kmph(50)
	case "BG:rural":
		return kmph(90)
	case "BG:living_street":
		return kmph(20)
	case "BG:trunk":
		return kmph(120)
	case "BG:motorway":
		return kmph(140)
	case "BY:urban":
		return kmph(60)
	case "BY:rural":
		return kmph(90)
	case "BY:living_street":
		return kmph(20)
	case "BY:motorway":
		return kmph(110)
	case "CA-AB:urban":
		return kmph(50)
	case "CA-BC:urban":
		return kmph(50)
	case "CA-MB:urban":
		return kmph(50)
	case "CA-ON:urban":
		return kmph(50)
	case "CA-QC:urban":
		return kmph(50)
	case "CA-AB:rural":
		return kmph(80)
	case "CA-BC:rural":
		return kmph(80)
	case "CA-MB:rural":
		return kmph(90)
	case "CA-ON:rural":
		return kmph(80)
	case "CA-QC:rural":
		return kmph(80)
	case "CA-QC:motorway":
		return kmph(100)
	case "CA-SK:nsl":
		return kmph(80)
	case "CH:urban":
		return kmph(50)
	case "CH:rural":
		return kmph(80)
	case "CH:trunk":
		return kmph(100)
	case "CH:motorway":
		return kmph(120)
	case "CZ:urban":
		return kmph(50)
	case "CZ:rural":
		return kmph(90)
	case "CZ:pedestrian_zone":
		return kmph(20)
	case "CZ:living_street":
		return kmph(20)
	case "CZ:urban_motorway":
		return kmph(80)
	case "CZ:urban_trunk":
		return kmph(80)
	case "CZ:trunk":
		return kmph(110)
	case "CZ:motorway":
		return kmph(130)
	case "DE:urban":
		return kmph(50)
	case "DE:rural":
		return kmph(100)
	case "DE:living_street":
		return kmph(7)
	case "DE:bicycle_road":
		return kmph(30)
	case "DE:motorway":
		return maxSpeed, nil
	case "DK:urban":
		return kmph(50)
	case "DK:rural":
		return kmph(80)
	case "DK:motorway":
		return kmph(130)
	case "EE:urban":
		return kmph(50)
	case "EE:rural":
		return kmph(90)
	case "ES:urban":
		return kmph(50)
	case "ES:rural":
		return kmph(90)
	case "ES:living_street":
		return kmph(20)
	case "ES:zone30":
		return kmph(30)
	case "ES:trunk":
		return kmph(90)
	case "ES:motorway":
		return kmph(120)
	case "FI:urban":
		return kmph(50)
	case "FI:rural":
		return kmph(80)
	case "FI:trunk":
		return kmph(100)
	case "FI:motorway":
		return kmph(120)
	case "FR:urban":
		return kmph(50)
	case "FR:rural":
		return kmph(80)
	case "FR:zone30":
		return kmph(30)
	case "FR:motorway":
		return kmph(130)
	case "GB:nsl_restricted":
		return mph(30)
	case "GB:motorway":
		return mph(70)
	case "GB:nsl_dual":
		return mph(70)
	case "GB:nsl_single":
		return mph(60)
	case "GR:urban":
		return kmph(50)
	case "GR:rural":
		return kmph(90)
	case "GR:trunk":
		return kmph(110)
	case "GR:motorway":
		return kmph(130)
	case "HU:urban":
		return kmph(50)
	case "HU:rural":
		return kmph(90)
	case "HU:living_street":
		return kmph(20)
	case "HU:trunk":
		return kmph(110)
	case "HU:motorway":
		return kmph(130)
	case "IT:urban":
		return kmph(50)
	case "IT:rural":
		return kmph(90)
	case "IT:trunk":
		return kmph(110)
	case "IT:motorway":
		return kmph(130)
	case "JP:nsl":
		return kmph(60)
	case "JP:express":
		return kmph(100)
	case "LT:urban":
		return kmph(50)
	case "LT:rural":
		return kmph(90)
	case "NO:urban":
		return kmph(50)
	case "NO:rural":
		return kmph(80)
	case "PH:urban":
		return kmph(30)
	case "PH:rural":
		return kmph(80)
	case "PH:express":
		return kmph(100)
	case "PT:urban":
		return kmph(50)
	case "PT:rural":
		return kmph(90)
	case "PT:trunk":
		return kmph(100)
	case "PT:motorway":
		return kmph(120)
	case "RO:urban":
		return kmph(50)
	case "RO:rural":
		return kmph(90)
	case "RO:trunk":
		return kmph(100)
	case "RO:motorway":
		return kmph(130)
	case "RS:urban":
		return kmph(60)
	case "RS:rural":
		return kmph(80)
	case "RS:living_street":
		return kmph(10)
	case "RS:trunk":
		return kmph(100)
	case "RS:motorway":
		return kmph(130)
	case "RU:urban":
		return kmph(60)
	case "RU:rural":
		return kmph(90)
	case "RU:living_street":
		return kmph(20)
	case "RU:motorway":
		return kmph(110)
	case "SE:urban":
		return kmph(50)
	case "SE:rural":
		return kmph(70)
	case "SI:urban":
		return kmph(50)
	case "SI:rural":
		return kmph(90)
	case "SI:trunk":
		return kmph(110)
	case "SI:motorway":
		return kmph(130)
	case "SK:urban":
		return kmph(50)
	case "SK:rural":
		return kmph(90)
	case "SK:living_street":
		return kmph(20)
	case "SK:trunk":
		return kmph(90)
	case "SK:motorway":
		return kmph(130)
	case "SK:motorway_urban":
		return kmph(90)
	case "TR:urban":
		return kmph(50)
	case "TR:rural":
		return kmph(90)
	case "TR:living_street":
		return kmph(20)
	case "TR:zone30":
		return kmph(30)
	case "TR:trunk":
		return kmph(110)
	case "TR:motorway":
		return kmph(120)
	case "UA:urban":
		return kmph(50)
	case "UA:rural":
		return kmph(90)
	case "UA:living_street":
		return kmph(20)
	case "UA:trunk":
		return kmph(110)
	case "UA:motorway":
		return kmph(130)
	case "UZ:urban":
		return kmph(70)
	case "UZ:rural":
		return kmph(100)
	case "UZ:living_street":
		return kmph(30)
	case "UZ:motorway":
		return kmph(110)

	default:
		return 0, fmt.Errorf("unknown maxspeed value: %s", speedStr)
	}
}
